from .plugin import Plugin
import time
import os
import ipaddress
from csirtg_indicator import Indicator
from pprint import pprint

try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO

OUTPUT_PATH = os.getenv('CSIRTG_INDICATOR_BINDRPZ_PATH', '/etc/bind/rpz')
SUPPORTED_ITYPES = { 'ipv4', 'ipv6' }

def ip_to_rpzip(ip):
    '''takes in an ip address str in singleton or CIDR format and returns a str
    formatted for rpz-ip
    input: (str), e.g., '192.168.1.1', '192.0.2.0/24', or '2001:db8:101::/48'
    output: (str), e.g., '32.1.1.168.192', '24.0.2.0.192', or '48.zz.101.db8.2001'
    '''
    try:
        ip = ipaddress.ip_network(ip)
    except Exception as e:
        pprint('error converting ip {} to range: {}'.format(ip, e))
        return None, None, None

    start = str(ip.network_address)
    mask = ip.prefixlen

    if isinstance(ip, ipaddress.IPv4Network):
        splitchar = '.'
    else:
        splitchar = ':'
        start = start.replace('::', ':zz:')
        if start.endswith(':zz:'):
            start = start[:-1]

    rpzip = str(mask) + '.' + '.'.join(reversed(start.split(splitchar))) + '.rpz-ip'

    return rpzip



def get_lines(data, filename=OUTPUT_PATH):
    output = StringIO()
    text = [
        ";;; generated by: {} at {}".format('csirtg-indicator', time.strftime('%Y-%m-%dT%H:%M:%S %Z')),
        ';RPZ-IP DATA!',
        '$TTL    1',
        '@       IN      SOA     localhost. root.localhost. (',
        '                     {}         ; Serial'.format(int(time.time())),
        '                         604800         ; Refresh',
        '                          86400         ; Retry',
        '                        2419200         ; Expire',
        '                          86400 )       ; Negative Cache TTL',
        ';',
        '@       IN      NS      localhost.'
    ]

    for t in text:
        output.write(t)
        yield str(output.getvalue())

        if isinstance(output, StringIO):
            output.truncate(0)

    for i in data:
        if isinstance(i, Indicator):
            i = i.__dict__()

        if i['itype'] not in SUPPORTED_ITYPES:
            continue

        output.write('{}        CNAME .'.format(ip_to_rpzip(i['indicator']), filename))
        yield output.getvalue()

        if isinstance(output, StringIO):
            output.truncate(0)


class BindRPZIP(Plugin):

    def __init__(self, *args, **kwargs):
        super(BindRPZIP, self).__init__(*args, **kwargs)

        self.output = kwargs.get('output', OUTPUT_PATH)

    def __repr__(self):
        text = [
            ';;; generated by: {} at {}'.format('csirtg-indicator', time.strftime('%Y-%m-%dT%H:%M:%S %Z')),
            '; RPZ-IP DATA!',
            '$TTL    1',
            '@       IN      SOA     localhost. root.localhost. (',
            '                     {}         ; Serial'.format(int(time.time())),
            '                         604800         ; Refresh',
            '                          86400         ; Retry',
            '                        2419200         ; Expire',
            '                          86400 )       ; Negative Cache TTL',
            ';',
            '@       IN      NS      localhost.'
        ]

        for i in self.data:
            if isinstance(i, Indicator):
                i = i.__dict__()

            if i.get('itype') not in SUPPORTED_ITYPES:
                continue

            text.append('{}        CNAME .'.format(ip_to_rpzip(i['indicator']), self.output))

        return '\n'.join(text)